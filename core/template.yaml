AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Digital Identity IPV CRI Core Infrastructure"

Parameters:
  Environment:
    Type: String
    Default: "none"
  ServiceName:
    Type: String
    Default: "passport"
  VpcStackName:
    Description: VPC Stack name
    Type: String
    Default: "none"
  
Conditions:
  UseVpc:
    Fn::Not:
      - Fn::Equals:
          - !Ref VpcStackName
          - "none"

Resources:
  CriVcSigningKey1:
    Type: AWS::KMS::Key
    Properties:
      Description: Asymmetric key used by the CRI for signing verifiable credentials.
      Enabled: true
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable Root access"
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
      Tags:
        - Key: "jwkset"
          Value: "true"
        - Key: "awsStackName"
          Value: !Sub "${AWS::StackName}"

  CriDecryptionKey1:
    Type: AWS::KMS::Key
    Properties:
      Description: Asymmetric key used by the CRI to decrypt the Authorization JAR JWE
      Enabled: true
      KeySpec: RSA_2048
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable Root access"
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
      Tags:
        - Key: "jwkset"
          Value: "true"
        - Key: "awsStackName"
          Value: !Sub "${AWS::StackName}"

  SessionTable1:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}-session1"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
        - AttributeName: "authorizationCode"
          AttributeType: "S"
        - AttributeName: "accessToken"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "authorizationCode-index"
          KeySchema:
            - AttributeName: "authorizationCode"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "sessionId"
              - "redirectUri"
              - "clientId"
            ProjectionType: "INCLUDE"
        - IndexName: "access-token-index"
          KeySchema:
            - AttributeName: "accessToken"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "sessionId"
              - "subject"
            ProjectionType: "INCLUDE"
      TimeToLiveSpecification:
        AttributeName: expiry-date
        Enabled: true

  ApiKey1:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: Api key 1
      Enabled: true

  ApiKey2:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: Api key 2
      Enabled: true

  AlarmTopic:
    Type: AWS::SNS::Topic

  AlarmTopicSubscriptionPagerDuty:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlarmTopic
      Endpoint: "{{resolve:ssm:/alerting/pagerduty/url}}"
      Protocol: https

  AlarmPublishToTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref AlarmTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref AlarmTopic
            Principal:
              Service: cloudwatch.amazonaws.com
            Condition:
              ArnLike:
                AWS:SourceArn: !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*

  PublishedKeysS3Bucket:
    Type: AWS::S3::Bucket
    # checkov:skip=CKV_AWS_18: "Ensure the S3 bucket has access logging enabled"
    Properties:
      BucketName: !Sub "govuk-one-login-${ServiceName}-published-keys-${Environment}-rrob"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: "Description"
          Value: "Published OAuth or DID keys bucket for key rotation state machine"

  PublishedKeysS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublishedKeysS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "1. Delegate IAM Access"
            Action:
              - "s3:*"
            Effect: Allow
            Resource:
              - !GetAtt PublishedKeysS3Bucket.Arn
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"

  PublishKeyFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Role: !GetAtt PublishKeyFunctionRole.Arn
      CodeUri: .
      Handler: publish-key/src/publish-key-handler.lambdaHandler
      FunctionName: !Sub "${AWS::StackName}-publishKey"
      Timeout: 30
      Runtime: nodejs20.x
      Architectures: [arm64]
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          AWS_STACK_NAME: !Sub "${AWS::StackName}"
          POWERTOOLS_LOG_LEVEL: "INFO"
          POWERTOOLS_METRICS_NAMESPACE: !Sub "${AWS::StackName}"
          POWERTOOLS_SERVICE_NAME: !Sub "${AWS::StackName}-publishKey"
          REGION: !Sub "${AWS::Region}"
          JWKS_BUCKET_NAME: !Ref PublishedKeysS3Bucket
          DECRYPTION_KEY_ID: !Ref CriDecryptionKey1
      VpcConfig: !If
        - UseVpc
        - SecurityGroupIds:
            - Fn::ImportValue: !Sub "${VpcStackName}-AWSServicesEndpointSecurityGroupId"
          SubnetIds:
            - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
            - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
        - !Ref AWS::NoValue
      Tags:
        key_consumer_type : "manage"

  PublishKeyFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-${PublishKeyFunction}"
      RetentionInDays: 30

  PublishKeyFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
      Policies:
        - PolicyName: PublishKeyFunctionAccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "kms:DescribeKey"
                  - "kms:GetPublicKey"
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::govuk-one-login-${ServiceName}-published-keys-${Environment}-rrob"
                  - !Sub "arn:aws:s3:::govuk-one-login-${ServiceName}-published-keys-${Environment}-rrob/*"
      Tags:
        - Key: "key_consumer_type"
          Value: "manage"

Outputs:
  TableNameSession1:
    Description: "DynamoDB Session Table Name"
    Value: !Ref SessionTable1
    Export:
      Name: !Sub ${AWS::StackName}-TableNameSession1

  CriVcSigningKey1Id:
    Description: "CRI KMS Signing Key 1 Id"
    Value: !Ref CriVcSigningKey1
    Export:
      Name: !Sub ${AWS::StackName}-CriVcSigningKey1Id

  CriVcSigningKey1Arn:
    Description: "CRI KMS Signing Key 1 Arn"
    Value: !GetAtt CriVcSigningKey1.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CriVcSigningKey1Arn

  CriDecryptionKey1Id:
    Description: "CRI KMS Decryption Key 1 Id"
    Value: !Ref CriDecryptionKey1
    Export:
      Name: !Sub ${AWS::StackName}-CriDecryptionKey1Id

  CriDecryptionKey1Arn:
    Description: "CRI KMS Decryption Key 1 Arn"
    Value: !GetAtt CriDecryptionKey1.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CriDecryptionKey1Arn

  ApiKey1:
    Description: "API key 1 for API Gateway"
    Value: !Ref ApiKey1
    Export:
      Name: !Sub ${AWS::StackName}-ApiKey1

  ApiKey2:
    Description: "API key 2 for API Gateway"
    Value: !Ref ApiKey2
    Export:
      Name: !Sub ${AWS::StackName}-ApiKey2

  AlarmTopic:
    Description: "Alarm SNS Topic"
    Value: !Ref AlarmTopic
    Export:
      Name: !Sub ${AWS::StackName}-AlarmTopic

  PublishedKeysS3BucketName:
    Value: !Ref PublishedKeysS3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-PublishedKeysS3BucketName

  PublishedKeysS3BucketArn:
    Value: !GetAtt PublishedKeysS3Bucket.Arn
    Export:
      Name: !Sub ${AWS::StackName}-PublishedKeysS3BucketArn

  PublishKeyFunction:
    Value: !Ref PublishKeyFunction
    Export:
      Name: !Sub ${AWS::StackName}-PublishKeyFunction
