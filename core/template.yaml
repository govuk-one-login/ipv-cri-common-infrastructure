AWSTemplateFormatVersion: "2010-09-09"
Transform: [ AWS::LanguageExtensions, AWS::Serverless-2016-10-31 ]
Description: "Digital Identity IPV CRI Core Infrastructure"

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - E3031
        - E3033
        - W8003
        - W8001

### AWS Region is set on deployment so no need to provide an environment value here
Parameters:
  BuildNotificationStackName:
    Description: The topic to send key rotation bucket access notifications to
    Type: String
    Default: "none"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  Environment:
    Type: String
    Default: "local"
    AllowedValues:
      - "local"
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template
    Default: "none"
  ServiceName:
    Type: String
    Description: Provide a service name to enable naming convention patterns e.g. address, f2f, passport
    Default: "none"
  VpcStackName:
    Description: VPC Stack name
    Type: String
    Default: "none"
  
Conditions:
  IsDev: !Equals [!Ref Environment, dev]
  IsLocal: !Equals [!Ref Environment, local]
  IsNotLocal: !Not [!Condition IsLocal]
  IsDevOrLocal: !Or [!Condition IsDev, !Condition IsLocal]
  IsNotDevOrLocal: !Not [!Condition IsDevOrLocal]
  IsProd: !Equals [!Ref Environment, production]
  UseCodeSigning: !Not
    - !Equals [!Ref CodeSigningConfigArn, "none"]
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  UseVpc:
    Fn::Not:
      - Fn::Equals:
          - !Ref VpcStackName
          - "none"

Resources:
  CriVcSigningKey1:
    Type: AWS::KMS::Key
    Properties:
      Description: Asymmetric key used by the CRI for signing verifiable credentials.
      Enabled: true
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable Root access"
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
      Tags:
        - Key: "jwkset"
          Value: "true"
        - Key: "awsStackName"
          Value: !Sub "${AWS::StackName}"

  CriDecryptionKey1:
    Type: AWS::KMS::Key
    Properties:
      Description: Asymmetric key used by the CRI to decrypt the Authorization JAR JWE
      Enabled: true
      KeySpec: RSA_2048
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable Root access"
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
      Tags:
        - Key: "jwkset"
          Value: "true"
        - Key: "awsStackName"
          Value: !Sub "${AWS::StackName}"

  SessionTable1:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}-session1"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
        - AttributeName: "authorizationCode"
          AttributeType: "S"
        - AttributeName: "accessToken"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "authorizationCode-index"
          KeySchema:
            - AttributeName: "authorizationCode"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "sessionId"
              - "redirectUri"
              - "clientId"
            ProjectionType: "INCLUDE"
        - IndexName: "access-token-index"
          KeySchema:
            - AttributeName: "accessToken"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "sessionId"
              - "subject"
            ProjectionType: "INCLUDE"
      TimeToLiveSpecification:
        AttributeName: expiry-date
        Enabled: true

  ApiKey1:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: Api key 1
      Enabled: true

  ApiKey2:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: Api key 2
      Enabled: true

  AlarmTopic:
    Type: AWS::SNS::Topic

  AlarmTopicSubscriptionPagerDuty:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlarmTopic
      Endpoint: "{{resolve:ssm:/alerting/pagerduty/url}}"
      Protocol: https

  AlarmPublishToTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref AlarmTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref AlarmTopic
            Principal:
              Service: cloudwatch.amazonaws.com
            Condition:
              ArnLike:
                AWS:SourceArn: !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*

  PublishedKeysS3Bucket:
    Type: AWS::S3::Bucket
    # checkov:skip=CKV_AWS_18: "Ensure the S3 bucket has access logging enabled"
    Properties:
      BucketName: !Sub "govuk-one-login-${ServiceName}-published-keys-${Environment}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      ObjectLockEnabled: !If [ IsNotDevOrLocal, true, !Ref "AWS::NoValue" ]
      ObjectLockConfiguration: !If
        - IsNotDevOrLocal
        - ObjectLockEnabled: Enabled
          Rule:
            DefaultRetention:
              Mode: !If [ IsProd, "COMPLIANCE", "GOVERNANCE" ]
              Days: 1
        - !Ref "AWS::NoValue"
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: "Description"
          Value: "Published OAuth or DID keys bucket for key rotation state machine"

  PublishedKeysS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsNotLocal
    Properties:
      Bucket: !Ref PublishedKeysS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "1. Delegate IAM Access"
            Action:
              - "s3:*"
            Effect: Allow
            Resource:
              - !GetAtt PublishedKeysS3Bucket.Arn
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
          - Sid: "2. Allow Read permissions"
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
              - s3:GetObject
            Resource:
              - !GetAtt PublishedKeysS3Bucket.Arn
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              StringEquals:
                "aws:PrincipalTag/key_consumer_type":
                  - "use"
                  - "manage"
          - Sid: "3. Deny Read permissions if tag is missing, or not equal to use/manage"
            Effect: Deny
            Principal:
              AWS: "*"
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
              - s3:GetObject
            Resource:
              - !GetAtt PublishedKeysS3Bucket.Arn
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              StringNotEqualsIfExists:
                "aws:PrincipalTag/key_consumer_type":
                  - "manage"
                  - "use"
          - Sid: "4. Allow Write permission for manage tag only"
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - "s3:Put*"
            Resource:
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              StringEquals:
                "aws:PrincipalTag/key_consumer_type": "manage"
          - Sid: "5. Deny Write permission if tag is missing, or not equal to manage"
            Effect: Deny
            Principal:
              AWS: "*"
            Action:
              - "s3:Put*"
            Resource:
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              StringNotEqualsIfExists:
                "aws:PrincipalTag/key_consumer_type": "manage"
          - Sid: "6. Deny all access if not using SecureTransport"
            Effect: Deny
            Principal:
              AWS: "*"
            Action: "*"
            Resource:
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  PublishKeyFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/PublishKeyHandler.ts
    Properties:
      CodeUri: ./publish-key
      Handler: src/PublishKeyHandler.lambdaHandler
      FunctionName: !Sub "${AWS::StackName}-publishKey"
      Timeout: 30
      Runtime: nodejs20.x
      Architectures: [arm64]
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          AWS_STACK_NAME: !Sub "${AWS::StackName}"
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_METRICS_NAMESPACE: !Sub "${AWS::StackName}"
          POWERTOOLS_SERVICE_NAME: !Sub "${AWS::StackName}-publishKey"
          JWKS_BUCKET_NAME: !Ref PublishedKeysS3Bucket
          DECRYPTION_KEY_ID: !Ref CriDecryptionKey1
      Role: !GetAtt PublishKeyLambdaFunctionRole.Arn
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      VpcConfig: !If
        - UseVpc
        - SecurityGroupIds:
            - Fn::ImportValue: !Sub "${VpcStackName}-AWSServicesEndpointSecurityGroupId"
          SubnetIds:
            - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
            - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
        - !Ref AWS::NoValue
      Tags:
        key_consumer_type: "manage"

  PublishKeyLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Policies:
        - PolicyName: PublishKeyFunctionAccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "kms:DescribeKey"
                  - "kms:GetPublicKey"
                Resource:
                  - !GetAtt CriDecryptionKey1.Arn
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource:
                  - !GetAtt PublishedKeysS3Bucket.Arn
                  - !Sub '${PublishedKeysS3Bucket.Arn}/*'
      Tags:
        - Key: "key_consumer_type"
          Value: "manage"

  PublishKeyFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-${PublishKeyFunction}"
      RetentionInDays: 30

  PublishedKeysS3BucketLogGroup:
    Type: AWS::Logs::LogGroup
    # Condition: IsNotDevOrLocal   
    Properties:
      LogGroupName: !Join
        - "-"
        - - !Ref PublishedKeysS3Bucket
          - "logs"
      RetentionInDays: 30

  PublishedKeysLogsBucket:
    Type: AWS::S3::Bucket
    Condition: IsNotDevOrLocal   
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref PublishedKeysS3Bucket
          - "logs"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  PublishedKeysLogsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: IsNotDevOrLocal
    Properties:
      Bucket: !Ref PublishedKeysLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "s3:GetBucketAcl"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Resource: !Sub "arn:aws:s3:::${PublishedKeysLogsBucket}"
          - Effect: Allow
            Action: "s3:PutObject"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Resource: !Sub "arn:aws:s3:::${PublishedKeysLogsBucket}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": "bucket-owner-full-control"
          - Effect: Deny
            Action: "s3:*"
            Principal: "*"
            Resource:
              - !GetAtt PublishedKeysLogsBucket.Arn
              - !Sub "${PublishedKeysLogsBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": false

  Trail:
    DependsOn:
      - PublishedKeysLogsBucketPolicy
    Type: AWS::CloudTrail::Trail
    Condition: IsNotDevOrLocal   
    Properties:
      TrailName: !Sub "${Environment}-${AWS::StackName}-cloudtrail"
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: false
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Join
                  - ""
                  - - !GetAtt PublishedKeysS3Bucket.Arn
                    - "/"
          IncludeManagementEvents: false
          ReadWriteType: All
      S3BucketName: !Ref PublishedKeysLogsBucket
      EnableLogFileValidation: true
      CloudWatchLogsLogGroupArn: !GetAtt PublishedKeysS3BucketLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt TrailLogGroupRole.Arn

  TrailLogGroupRole:
    Type: AWS::IAM::Role
    Condition: IsNotDevOrLocal   
    Properties:
      PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service:
                - "cloudtrail.amazonaws.com"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-PublishedKeysS3BucketCloudtrailLogGroupRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !GetAtt PublishedKeysS3BucketLogGroup.Arn

  PublishedKeysS3BucketObjectActionsMetricFilter:
      Type: AWS::Logs::MetricFilter
      # Condition: IsNotDevOrLocal      
      Properties:
        LogGroupName: !Ref PublishedKeysS3BucketLogGroup
        FilterPattern:
          Fn::Join:
            - ""
            - - '{'
              - '($.eventSource = s3.amazonaws.com) &&'
              - '($.eventName = DeleteObject || $.eventName = PutObject) &&'
              - '($.userIdentity.arn != "*OAuthGenerationFunctionRole*")'
              - '}'
        MetricTransformations:
          - MetricName: UnauthorisedS3ObjectAction
            MetricNamespace: PublishedKeysBucket
            MetricValue: 1

  PublishedKeysS3BucketObjectActionAlarm:
    Type: AWS::CloudWatch::Alarm
    # Condition: IsNotDevOrLocal
    Properties:
      AlarmName: !Sub ${AWS::StackName}-PublishedKeysS3BucketObjectActionAlarm
      AlarmDescription: !Sub "A role other than the `OAuthGenerationFunctionRole` has attempted to `PutObject` or `DeleteObject` to `${PublishedKeysS3Bucket.Arn}`. Check Cloudwatch for further details."
      MetricName: UnauthorisedS3ObjectAction
      Namespace: PublishedKeysBucket
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - Fn::ImportValue: !Sub "${BuildNotificationStackName}-BuildNotificationTopicArn"

  PublishedKeysBucketConfigChangeMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Condition: IsNotDevOrLocal
    Properties:
      LogGroupName: !Ref PublishedKeysS3BucketLogGroup
      FilterPattern: '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'
      MetricTransformations:
        - MetricName: PublishedKeysBucketConfigChange
          MetricNamespace: PublishedKeysBucket
          MetricValue: 1

  PublishedKeysBucketConfigChangeAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDevOrLocal
    Properties:
      AlarmName: !Sub ${AWS::StackName}-PublishedKeysBucketConfigChangeAlarm
      AlarmDescription: !Sub "Changes have been made to `${PublishedKeysS3Bucket.Arn}`, for example, a `DeleteBucketPolicy`, `DeleteBucketLifecycle` or `PutBucketCors` event. Check Cloudwatch for further details."
      MetricName: PublishedKeysBucketConfigChange
      Namespace: PublishedKeysBucket
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - Fn::ImportValue: !Sub "${BuildNotificationStackName}-BuildNotificationTopicArn"

Outputs:
  TableNameSession1:
    Description: "DynamoDB Session Table Name"
    Value: !Ref SessionTable1
    Export:
      Name: !Sub ${AWS::StackName}-TableNameSession1

  CriVcSigningKey1Id:
    Description: "CRI KMS Signing Key 1 Id"
    Value: !Ref CriVcSigningKey1
    Export:
      Name: !Sub ${AWS::StackName}-CriVcSigningKey1Id

  CriVcSigningKey1Arn:
    Description: "CRI KMS Signing Key 1 Arn"
    Value: !GetAtt CriVcSigningKey1.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CriVcSigningKey1Arn

  CriDecryptionKey1Id:
    Description: "CRI KMS Decryption Key 1 Id"
    Value: !Ref CriDecryptionKey1
    Export:
      Name: !Sub ${AWS::StackName}-CriDecryptionKey1Id

  CriDecryptionKey1Arn:
    Description: "CRI KMS Decryption Key 1 Arn"
    Value: !GetAtt CriDecryptionKey1.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CriDecryptionKey1Arn

  ApiKey1:
    Description: "API key 1 for API Gateway"
    Value: !Ref ApiKey1
    Export:
      Name: !Sub ${AWS::StackName}-ApiKey1

  ApiKey2:
    Description: "API key 2 for API Gateway"
    Value: !Ref ApiKey2
    Export:
      Name: !Sub ${AWS::StackName}-ApiKey2

  AlarmTopic:
    Description: "Alarm SNS Topic"
    Value: !Ref AlarmTopic
    Export:
      Name: !Sub ${AWS::StackName}-AlarmTopic

  PublishedKeysS3BucketName:
    Value: !Ref PublishedKeysS3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-PublishedKeysS3BucketName

  PublishedKeysS3BucketArn:
    Value: !GetAtt PublishedKeysS3Bucket.Arn
    Export:
      Name: !Sub ${AWS::StackName}-PublishedKeysS3BucketArn

  PublishKeyFunction:
    Value: !Ref PublishKeyFunction
    Export:
      Name: !Sub ${AWS::StackName}-PublishKeyFunction
