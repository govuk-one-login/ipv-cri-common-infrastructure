AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Digital Identity IPV CRI Core Infrastructure"

Parameters:
  BuildNotificationStackName:
    Description: The topic to send key rotation bucket access notifications to
    Type: String
    Default: "none"
  Environment:
    Type: String
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Default: "none"
  ServiceName:
    Type: String
    Default: "none"

Conditions:
  IsDev:
    Fn::Equals:
      - !Ref Environment
      - "dev"

  IsNotDev:
    Fn::Not:
      - !Condition IsDev

  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
    
Resources:
  CriVcSigningKey1:
    Type: AWS::KMS::Key
    Properties:
      Description: Asymmetric key used by the CRI for signing verifiable credentials.
      Enabled: true
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: 'Enable Root access'
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - 'kms:*'
            Resource: '*'
      Tags:
        - Key: "jwkset"
          Value: "true"
        - Key: "awsStackName"
          Value: !Sub "${AWS::StackName}"

  CriDecryptionKey1:
    Type: AWS::KMS::Key
    Properties:
      Description: Asymmetric key used by the CRI to decrypt the Authorization JAR JWE
      Enabled: true
      KeySpec: RSA_2048
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: 'Enable Root access'
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - 'kms:*'
            Resource: '*'
      Tags:
        - Key: "jwkset"
          Value: "true"
        - Key: "awsStackName"
          Value: !Sub "${AWS::StackName}"

  SessionTable1:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}-session1"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
        - AttributeName: "authorizationCode"
          AttributeType: "S"
        - AttributeName: "accessToken"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "authorizationCode-index"
          KeySchema:
            - AttributeName: "authorizationCode"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "sessionId"
              - "redirectUri"
              - "clientId"
            ProjectionType: "INCLUDE"
        - IndexName: "access-token-index"
          KeySchema:
            - AttributeName: "accessToken"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "sessionId"
              - "subject"
            ProjectionType: "INCLUDE"
      TimeToLiveSpecification:
        AttributeName: expiry-date
        Enabled: true

  ApiKey1:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: Api key 1
      Enabled: true

  ApiKey2:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: Api key 2
      Enabled: true

  AlarmTopic:
    Type: AWS::SNS::Topic

  AlarmTopicSubscriptionPagerDuty:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlarmTopic
      Endpoint: '{{resolve:ssm:/alerting/pagerduty/url}}'
      Protocol: https

  AlarmPublishToTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref AlarmTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref AlarmTopic
            Principal:
              Service: cloudwatch.amazonaws.com
            Condition:
              ArnLike:
                AWS:SourceArn: !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*

  PublishedKeysS3Bucket:
    Type: AWS::S3::Bucket
    # checkov:skip=CKV_AWS_18: "Ensure the S3 bucket has access logging enabled"
    Properties:
      BucketName: !Sub "${ServiceName}-${Environment}-key-rotation-bucket"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: "Description"
          Value: "Published OAuth or DID keys bucket for key rotation state machine"

  PublishedKeysS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublishedKeysS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Delegate IAM Access"
            Action:
              - 's3:*'
            Effect: Allow
            Resource:
              - !GetAtt PublishedKeysS3Bucket.Arn
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
          - Sid: "Bucket permissions"
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource:
              - !GetAtt PublishedKeysS3Bucket.Arn
            Condition:
              StringEquals:
                  "aws:ResourceTag/key_consumer_type":
                    - "manage"
                    - "use"
          - Sid: "Object permissions"
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - "s3:GetObject"
            Resource:
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              StringEquals:
                  "aws:ResourceTag/key_consumer_type":
                    - "manage"
                    - "use"         
          - Sid: "Deny all access if not using SecureTransport"
            Effect: Deny
            Principal:
              AWS: '*'
            Action: '*'
            Resource:
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  PublishedKeysS3BucketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Condition:
              StringEquals:
                  "aws:ResourceTag/key_consumer_type": "manage"
                  "aws:ResourceAccount": !Sub ${AWS::AccountId}
        Version: "2012-10-17"
      Policies:
        - PolicyName: PublishedKeysS3BucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:Put*
                Resource:
                  - !Sub ${PublishedKeysS3Bucket.Arn}/*
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  PublishedKeysS3BucketLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - "-"
        - - !Ref PublishedKeysS3Bucket
          - "logs"
      RetentionInDays: 30

  PublishedKeysLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref PublishedKeysS3Bucket
          - "logs"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  PublishedKeysLogsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref PublishedKeysLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "s3:GetBucketAcl"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Resource: !Sub "arn:aws:s3:::${PublishedKeysLogsBucket}"
          - Effect: Allow
            Action: "s3:PutObject"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Resource: !Sub "arn:aws:s3:::${PublishedKeysLogsBucket}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": "bucket-owner-full-control"
          - Effect: Deny
            Action: "s3:*"
            Principal: "*"
            Resource:
              - !GetAtt PublishedKeysLogsBucket.Arn
              - !Sub "${PublishedKeysLogsBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": false
          
  Trail:
    DependsOn:
      - PublishedKeysLogsBucketPolicy
    Type: AWS::CloudTrail::Trail
    Condition: IsNotDev
    Properties:
      TrailName: !Sub "${Environment}-${AWS::StackName}-cloudtrail"
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: false
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Join
                  - ""
                  - - !GetAtt PublishedKeysS3Bucket.Arn
                    - "/"
          IncludeManagementEvents: true
          ReadWriteType: All
      S3BucketName: !Ref PublishedKeysLogsBucket
      EnableLogFileValidation: true
      CloudWatchLogsLogGroupArn: !GetAtt PublishedKeysS3BucketLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt TrailLogGroupRole.Arn

  TrailLogGroupRole:
    Type: AWS::IAM::Role
    Condition: IsNotDev
    Properties:
      PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service:
                - "cloudtrail.amazonaws.com"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-PublishedKeysS3BucketCloudtrailLogGroupRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !GetAtt PublishedKeysS3BucketLogGroup.Arn

  PublishedKeysS3BucketObjectActionsMetricFilter:
      Type: AWS::Logs::MetricFilter
      Condition: IsNotDev
      Properties:
        LogGroupName: !Ref PublishedKeysS3BucketLogGroup
        FilterPattern:
          Fn::Join:
            - ""
            - - '{'
              - '($.eventSource = s3.amazonaws.com) &&'
              - '($.eventName = DeleteObject || $.eventName = PutObject) &&'
              - '($.userIdentity.arn != "'
              - !ImportValue OAuthGenerationFunctionRoleArn
              - '")'
              - '}'
        MetricTransformations:
          - MetricName: UnauthorisedS3ObjectAction
            MetricNamespace: PublishedKeysBucket
            MetricValue: 1

  PublishedKeysS3BucketObjectActionAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDev
    Properties:
      AlarmName: PublishedKeysS3BucketObjectActionAlarm
      AlarmDescription: A role other than the `OAuthGenerationFunctionRole` has attempted to `PutObject` or `DeleteObject`
      MetricName: UnauthorisedS3ObjectAction
      Namespace: PublishedKeysBucket
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - Fn::ImportValue: !Sub "${BuildNotificationStackName}-BuildNotificationTopicArn"

Outputs:

  TableNameSession1:
    Description: "DynamoDB Session Table Name"
    Value: !Ref SessionTable1
    Export:
      Name: !Sub ${AWS::StackName}-TableNameSession1

  CriVcSigningKey1Id:
    Description: "CRI KMS Signing Key 1 Id"
    Value: !Ref CriVcSigningKey1
    Export:
      Name: !Sub ${AWS::StackName}-CriVcSigningKey1Id

  CriVcSigningKey1Arn:
    Description: "CRI KMS Signing Key 1 Arn"
    Value: !GetAtt CriVcSigningKey1.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CriVcSigningKey1Arn

  CriDecryptionKey1Id:
    Description: "CRI KMS Decryption Key 1 Id"
    Value: !Ref CriDecryptionKey1
    Export:
      Name: !Sub ${AWS::StackName}-CriDecryptionKey1Id

  CriDecryptionKey1Arn:
    Description: "CRI KMS Decryption Key 1 Arn"
    Value: !GetAtt CriDecryptionKey1.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CriDecryptionKey1Arn

  ApiKey1:
    Description: "API key 1 for API Gateway"
    Value: !Ref ApiKey1
    Export:
      Name: !Sub ${AWS::StackName}-ApiKey1

  ApiKey2:
    Description: "API key 2 for API Gateway"
    Value: !Ref ApiKey2
    Export:
      Name: !Sub ${AWS::StackName}-ApiKey2

  AlarmTopic:
    Description: "Alarm SNS Topic"
    Value: !Ref AlarmTopic
    Export:
      Name: !Sub ${AWS::StackName}-AlarmTopic

  PublishedKeysS3BucketName:
    Value: !Ref PublishedKeysS3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-PublishedKeysS3BucketName

  PublishedKeysS3BucketArn:
    Value: !GetAtt PublishedKeysS3Bucket.Arn
    Export:
      Name: !Sub ${AWS::StackName}-PublishedKeysS3BucketArn