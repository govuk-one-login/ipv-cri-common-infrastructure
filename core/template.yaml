AWSTemplateFormatVersion: "2010-09-09"
Transform: [ AWS::LanguageExtensions, AWS::Serverless-2016-10-31 ]
Description: "Digital Identity IPV CRI Core Infrastructure"

Parameters:
  Environment:
    Type: String
    Default: "local"
    AllowedValues:
      - "local"
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
  ServiceName:
    Type: String
    Default: "none"

Conditions:
  IsDev: !Equals [!Ref Environment, dev]
  IsLocal: !Equals [!Ref Environment, local]
  IsNotLocal: !Not [!Condition IsLocal]
  IsDevOrLocal: !Or [!Condition IsDev, !Condition IsLocal]
  IsNotDevOrLocal: !Not [!Condition IsDevOrLocal]
  IsProd: !Equals [!Ref Environment, production]

Resources:
  CriVcSigningKey1:
    Type: AWS::KMS::Key
    Properties:
      Description: Asymmetric key used by the CRI for signing verifiable credentials.
      Enabled: true
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: 'Enable Root access'
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - 'kms:*'
            Resource: '*'
      Tags:
        - Key: "jwkset"
          Value: "true"
        - Key: "awsStackName"
          Value: !Sub "${AWS::StackName}"

  CriDecryptionKey1:
    Type: AWS::KMS::Key
    Properties:
      Description: Asymmetric key used by the CRI to decrypt the Authorization JAR JWE
      Enabled: true
      KeySpec: RSA_2048
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: 'Enable Root access'
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - 'kms:*'
            Resource: '*'
      Tags:
        - Key: "jwkset"
          Value: "true"
        - Key: "awsStackName"
          Value: !Sub "${AWS::StackName}"

  SessionTable1:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}-session1"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
        - AttributeName: "authorizationCode"
          AttributeType: "S"
        - AttributeName: "accessToken"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "authorizationCode-index"
          KeySchema:
            - AttributeName: "authorizationCode"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "sessionId"
              - "redirectUri"
              - "clientId"
            ProjectionType: "INCLUDE"
        - IndexName: "access-token-index"
          KeySchema:
            - AttributeName: "accessToken"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "sessionId"
              - "subject"
            ProjectionType: "INCLUDE"
      TimeToLiveSpecification:
        AttributeName: expiry-date
        Enabled: true

  ApiKey1:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: Api key 1
      Enabled: true

  ApiKey2:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: Api key 2
      Enabled: true

  AlarmTopic:
    Type: AWS::SNS::Topic

  AlarmTopicSubscriptionPagerDuty:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlarmTopic
      Endpoint: '{{resolve:ssm:/alerting/pagerduty/url}}'
      Protocol: https

  AlarmPublishToTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref AlarmTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref AlarmTopic
            Principal:
              Service: cloudwatch.amazonaws.com
            Condition:
              ArnLike:
                AWS:SourceArn: !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*

  PublishedKeysS3Bucket:
    Type: AWS::S3::Bucket
    # checkov:skip=CKV_AWS_18: "Ensure the S3 bucket has access logging enabled"
    Properties:
      BucketName: !Sub "govuk-one-login-${ServiceName}-published-keys-${Environment}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      ObjectLockEnabled: !If [ IsNotDevOrLocal, true, !Ref "AWS::NoValue" ]
      ObjectLockConfiguration: !If
        - IsNotDevOrLocal
        - ObjectLockEnabled: Enabled
          Rule:
            DefaultRetention:
              Mode: !If [ IsProd, "COMPLIANCE", "GOVERNANCE" ]
              Days: 1
        - !Ref "AWS::NoValue"
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: "Description"
          Value: "Published OAuth or DID keys bucket for key rotation state machine"

  PublishedKeysS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsNotLocal
    Properties:
      Bucket: !Ref PublishedKeysS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "1. Delegate IAM Access"
            Action:
              - "s3:*"
            Effect: Allow
            Resource:
              - !GetAtt PublishedKeysS3Bucket.Arn
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
          - Sid: "2. Allow Read permissions"
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
              - s3:GetObject
            Resource:
              - !GetAtt PublishedKeysS3Bucket.Arn
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              StringEquals:
                  "aws:PrincipalTag/key_consumer_type":
                    - "use"
                    - "manage"
          - Sid: "3. Deny Read permissions if tag is missing, or not equal to use/manage"
            Effect: Deny
            Principal:
              AWS: "*"
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
              - s3:GetObject
            Resource:
              - !GetAtt PublishedKeysS3Bucket.Arn
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              StringNotEqualsIfExists:
                "aws:PrincipalTag/key_consumer_type":
                  - "manage"
                  - "use"
          - Sid: "4. Allow Write permission for manage tag only"
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - "s3:Put*"
            Resource:
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              StringEquals:
                  "aws:PrincipalTag/key_consumer_type": "manage"
          - Sid: "5. Deny Write permission if tag is missing, or not equal to manage"
            Effect: Deny
            Principal:
              AWS: "*"
            Action:
              - "s3:Put*"
            Resource:
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              StringNotEqualsIfExists:
                "aws:PrincipalTag/key_consumer_type": "manage"
          - Sid: "6. Deny all access if not using SecureTransport"
            Effect: Deny
            Principal:
              AWS: "*"
            Action: "*"
            Resource:
              - !Sub ${PublishedKeysS3Bucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

Outputs:

  TableNameSession1:
    Description: "DynamoDB Session Table Name"
    Value: !Ref SessionTable1
    Export:
      Name: !Sub ${AWS::StackName}-TableNameSession1

  CriVcSigningKey1Id:
    Description: "CRI KMS Signing Key 1 Id"
    Value: !Ref CriVcSigningKey1
    Export:
      Name: !Sub ${AWS::StackName}-CriVcSigningKey1Id

  CriVcSigningKey1Arn:
    Description: "CRI KMS Signing Key 1 Arn"
    Value: !GetAtt CriVcSigningKey1.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CriVcSigningKey1Arn

  CriDecryptionKey1Id:
    Description: "CRI KMS Decryption Key 1 Id"
    Value: !Ref CriDecryptionKey1
    Export:
      Name: !Sub ${AWS::StackName}-CriDecryptionKey1Id

  CriDecryptionKey1Arn:
    Description: "CRI KMS Decryption Key 1 Arn"
    Value: !GetAtt CriDecryptionKey1.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CriDecryptionKey1Arn

  ApiKey1:
    Description: "API key 1 for API Gateway"
    Value: !Ref ApiKey1
    Export:
      Name: !Sub ${AWS::StackName}-ApiKey1

  ApiKey2:
    Description: "API key 2 for API Gateway"
    Value: !Ref ApiKey2
    Export:
      Name: !Sub ${AWS::StackName}-ApiKey2

  AlarmTopic:
    Description: "Alarm SNS Topic"
    Value: !Ref AlarmTopic
    Export:
      Name: !Sub ${AWS::StackName}-AlarmTopic

  PublishedKeysS3BucketName:
    Value: !Ref PublishedKeysS3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-PublishedKeysS3BucketName

  PublishedKeysS3BucketArn:
    Value: !GetAtt PublishedKeysS3Bucket.Arn
    Export:
      Name: !Sub ${AWS::StackName}-PublishedKeysS3BucketArn